name: MLOps CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_test: # This job remains the same
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up DVC and Pull Data from GCS
        run: |
          echo "Authenticating to Google Cloud..."
          echo '${{ secrets.GCP_SA_KEY }}' > gcp_creds_ci.json
          export GOOGLE_APPLICATION_CREDENTIALS=./gcp_creds_ci.json
          echo "DVC setup: Using GCS remote."
          echo "Pulling DVC tracked data from GCS..."
          dvc pull data/raw/reviews.csv -v
          echo "DVC data pull attempt finished."
          ls -lh data/raw/
          rm -f gcp_creds_ci.json

      - name: Reproduce DVC pipeline
        run: |
          echo "Attempting to reproduce DVC pipeline..."
          dvc repro -v
          echo "DVC pipeline reproduction attempt finished."
          echo "Listing models directory after DVC repro:"
          ls -lh models/ # Verify models are generated

      - name: Lint with Flake8
        run: |
          echo "Running Flake8 linter on src/ directory..."
          flake8 src/

      - name: Run Tests with Pytest
        run: |
          echo "Running Pytest..."
          pytest tests/ -v

  build_docker:
    name: Build and Push Docker Image
    needs: build_and_test # This job runs only if build_and_test succeeds
    runs-on: ubuntu-latest
    # Only run this job on pushes to the main branch, not on pull requests from forks (for security)
    # and not on every pull request update to avoid unnecessary pushes during development.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up DVC and Pull Models for Docker Build
        # This step ensures the 'models/' directory with actual model files is present
        # before Docker build context is created.
        run: |
          # Install Python and DVC (if not already available globally on runner)
          # Using setup-python is more robust.
          # python -m pip install --upgrade pip
          # pip install dvc[gcs] # Could also get from requirements.txt if needed
          # For this job, let's assume python & pip are available, install dvc directly
          python3 -m pip install --upgrade pip
          python3 -m pip install "dvc[gcs]" # Make sure DVC and GCS support is available
          
          echo "Authenticating to Google Cloud for Docker build..."
          echo '${{ secrets.GCP_SA_KEY }}' > gcp_creds_ci.json
          export GOOGLE_APPLICATION_CREDENTIALS=./gcp_creds_ci.json
          
          echo "Pulling models for Docker build..."
          # Ensure 'models/' directory exists for dvc pull to place files into
          mkdir -p models 
          # Pull the specific model files listed as outputs in dvc.yaml for the train_model stage
          # These are the files our Dockerfile's `COPY models/` command expects.
          dvc pull models/sentiment_model.joblib models/tfidf_vectorizer.joblib -v
          echo "Models pulled."
          ls -lh models/ # Verify models are present
          rm -f gcp_creds_ci.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Your GitHub username or organization name
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN has permissions to push to GHCR for your repo

      - name: Build and push Docker image to GHCR
        id: docker_build # Give the step an id to reference its outputs
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          file: ./Dockerfile # Path to your Dockerfile
          push: true # Actually push the image
          tags: ghcr.io/${{ github.repository_lower }}:latest,ghcr.io/${{ github.repository_lower }}:${{ github.sha }}
          # Example tags:
          # ghcr.io/your-username/sentiment-analysis-mlops:latest
          # ghcr.io/your-username/sentiment-analysis-mlops:<commit_sha>
          # `${github.repository_lower}` provides 'username/repositoryname' in lowercase.
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.docker_build.outputs.metadata. Doh, this is tricky, use date from workflow}}

      - name: Image Digest
        run: echo "Pushed image with digest: ${{ steps.docker_build.outputs.digest }}"