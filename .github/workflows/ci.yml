name: MLOps CI Pipeline

on:
  push:
    branches: [ main ] # Runs on pushes to the main branch
  pull_request:
    branches: [ main ] # Runs on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Match our project's Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up DVC and Pull Data from GCS
        env:
          # GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Optional: Set if needed and secret exists
        run: |
          echo "Authenticating to Google Cloud..."
          # Create the credentials file from the secret
          # Ensure secrets.GCP_SA_KEY is correctly set in GitHub repository settings
          echo '${{ secrets.GCP_SA_KEY }}' > gcp_creds_ci.json
          export GOOGLE_APPLICATION_CREDENTIALS=./gcp_creds_ci.json
          
          echo "DVC setup: Using GCS remote (should be default from .dvc/config)."
          
          echo "Pulling DVC tracked data from GCS..."
          # Pull only the raw data file(s) needed by your pipeline
          # If your pipeline only depends on reviews.csv directly:
          dvc pull data/raw/reviews.csv 
          # If you need all DVC tracked data (e.g. if pipeline had other DVC deps):
          # dvc pull -v # -v for verbose output
          
          echo "DVC data pull attempt finished."
          echo "Contents of data/raw after pull:"
          ls -lh data/raw/ # Verify reviews.csv is now the actual file and not a DVC placeholder
          
          # Clean up the temporary credentials file for security
          rm -f gcp_creds_ci.json

      - name: Reproduce DVC pipeline
        run: |
          echo "Attempting to reproduce DVC pipeline..."
          dvc repro -v # -v for verbose output
          echo "DVC pipeline reproduction attempt finished."

      - name: Lint with Flake8 (Placeholder)
        # To enable:
        # 1. Add 'flake8' to requirements.txt
        # 2. pip install -r requirements.txt locally and commit requirements.txt
        # 3. Uncomment the flake8 command below.
        run: |
          echo "Linting step (currently placeholder)..."
          # flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Tests with Pytest (Placeholder)
        # To enable:
        # 1. Add 'pytest' to requirements.txt
        # 2. Create test files in the 'tests/' directory (e.g., tests/test_preprocess.py)
        # 3. pip install -r requirements.txt locally and commit requirements.txt
        # 4. Uncomment the pytest command below.
        run: |
          echo "Testing step (currently placeholder)..."
          # pytest tests/ -v

    # --- Future Job: Build Docker Image (can be added later) ---
    # build_docker:
    #   needs: build_and_test # Depends on the previous job succeeding
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Checkout repository
    #       uses: actions/checkout@v4
    #
    #     - name: Set up DVC and Pull Models for Docker Build
    #       env:
    #         # GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    #       run: |
    #         echo "Authenticating to Google Cloud for Docker build..."
    #         echo '${{ secrets.GCP_SA_KEY }}' > gcp_creds_ci.json
    #         export GOOGLE_APPLICATION_CREDENTIALS=./gcp_creds_ci.json
    #         pip install dvc[gcs] # Ensure dvc is available
    #         echo "Pulling models for Docker build..."
    #         dvc pull models/sentiment_model.joblib models/tfidf_vectorizer.joblib -v
    #         # Or: dvc pull -R # to pull all outputs of dvc.yaml if they are DVC tracked
    #         echo "Models pulled."
    #         ls -lh models/
    #         rm -f gcp_creds_ci.json
    #
    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
    #
    #     - name: Login to GitHub Container Registry (or Docker Hub)
    #       if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    #       uses: docker/login-action@v3
    #       with:
    #         registry: ghcr.io # For GitHub Container Registry
    #         username: ${{ github.actor }}
    #         password: ${{ secrets.GITHUB_TOKEN }}
    #         # For Docker Hub:
    #         # username: ${{ secrets.DOCKERHUB_USERNAME }}
    #         # password: ${{ secrets.DOCKERHUB_TOKEN }}
    #
    #     - name: Build and push Docker image
    #       id: docker_build
    #       uses: docker/build-push-action@v5
    #       with:
    #         context: .
    #         file: ./Dockerfile
    #         push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    #         tags: ghcr.io/${{ github.repository_owner }}/sentiment-analysis-api:latest # For GHCR
    #         # For Docker Hub: yourdockerhubusername/sentiment-analysis-api:latest
    #         labels: |
    #           org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
    #           org.opencontainers.image.revision=${{ github.sha }}
    #
    #     - name: Echo image digest
    #       if: steps.docker_build.outputs.digest
    #       run: echo "Image digest: ${{ steps.docker_build.outputs.digest }}"